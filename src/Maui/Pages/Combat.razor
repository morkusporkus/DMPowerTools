@using DMPowerTools.Maui.Features.Creatures.Shared.CreatureDetail;
<MudGrid>
    <MudItem xs="12">
        <MudAutocomplete T="string" Label="Creature" @bind-Value="@returnCreature" SearchFunc="@Filter" Variant="Variant.Outlined" Immediate="true" ResetValueOnEmptyText="true" />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="InitiateCreature">Add To Combat</MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="InitiativeRoll">Initiative Roll</MudButton>
    </MudItem>

    @foreach (InitiatedCreature activeCreature in InitiatedCreatures)
    {
        <MudItem lg="3" xs="12">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudAvatar Image="" Size="Size.Large" />
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudGrid>
                            <MudItem xs="12">
                                <MudText Typo="Typo.h5">@activeCreature.Creature.Name</MudText>
                            </MudItem>
                            <MudItem xs="6">
                                <MudTextField Label="CR:" @bind-Value="activeCreature.Creature.cr" Disabled="true"></MudTextField>
                            </MudItem>
                            <MudItem xs="6">
                                <MudNumericField Label="HP:" @bind-Value="activeCreature.HitPoints" Min="0"></MudNumericField>
                            </MudItem>
                        </MudGrid>                    
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.caption"><b>Initiative Roll:</b>:@activeCreature.InititiveRoll</MudText>
                    <MudButton Text="Details" Color="Color.Secondary" OnClick="@(() => OpenDrawer(activeCreature))">Details</MudButton>
                </MudCardContent>
            </MudCard>
        </MudItem>
    }
    <MudDrawer Width="100%" Height="80%" @bind-Open="@open" Anchor="Anchor.Bottom" Elevation="1" Variant="@DrawerVariant.Temporary">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">@clickedCreature.Creature.Name</MudText>
        </MudDrawerHeader>
       <CreatureDetail Creature="@clickedCreature.Creature"/>
        <MudButton Text="Close" Color="Color.Error" OnClick="@(() => CloseDrawer())">Close</MudButton>
    </MudDrawer>

</MudGrid>


@using DMPowerTools.DataModels;
@using DMPowerTools.Maui.DataModels;
@code {
    @page "/combat"
    @using Microsoft.EntityFrameworkCore;
    @using Markdig;

    @inject ApplicationDbContext DBContext;
    string returnCreature { get; set; }
    IEnumerable<Creature> creatures;
    List<InitiatedCreature> InitiatedCreatures = new();
    InitiatedCreature clickedCreature = new();
    Creature selectedCreature = new();
    MudChip selected;
    bool open;

    protected override async Task OnInitializedAsync()
    {
        creatures = DBContext.Creatures.Include(a => a.Abilities).Include(b => b.Actions).ToList();
        selectedCreature.Actions = new List<Data.Action>();
    }

    private async Task<IEnumerable<string>> Filter(string value)
    {
        if (string.IsNullOrEmpty(value))
        {
            return creatures.Select(n => n.Name).ToList();
        }
        var lowerCaseSearchTerm = value.Trim().ToLower();
        return creatures.Select(n => n.Name).Where(p => p.ToLower().Contains(lowerCaseSearchTerm));
    }
    public void InitiateCreature()
    {
        if (returnCreature == string.Empty || returnCreature is null) return;

        selectedCreature = DBContext.Creatures.
        Where(a => a.Name == returnCreature).First();
        InitiatedCreatures.Add(new InitiatedCreature(0, selectedCreature));
    }
    public void InitiativeRoll()
    {
        foreach (InitiatedCreature a in InitiatedCreatures)
        {
            a.InititiveRoll = DiceRoller.RollForInitiative(a.Creature.DexPoints);
        }
        InitiatedCreatures = InitiatedCreatures.OrderByDescending(x => x.InititiveRoll).ToList();
    }
  
    void OpenDrawer(InitiatedCreature creature)
    {
        clickedCreature = creature;
        open = true;
    }
    void CloseDrawer()
    {
        open = false;
    }
}