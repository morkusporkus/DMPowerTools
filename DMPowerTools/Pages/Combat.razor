<link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
<link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />

<MudGrid>
        <MudItem xs="12">
        <MudAutocomplete T="string" Label="Creature" @bind-Value="@returnMonster" SearchFunc="@Filter" Variant="Variant.Outlined" Immediate="true" CoerceValue="@coerceValue" ResetValueOnEmptyText="true" />
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ButtonOnClick">Test</MudButton>
    </MudItem>
     <MudItem xs="12">
    <MudExpansionPanels>
            <MudExpansionPanel>

            
             <TitleContent>
                <div class="d-flex">
                    <MudAvatar Image="" Size="Size.Large" />
                        <MudText> <strong>@selectedMonster.Name</strong>  <small> @selectedMonster.CustomCr </small><em>@DiceRoll()</em>  </MudText>
                </div>
            </TitleContent>
            <ChildContent>
                 <MudExpansionPanel>
                      <TitleContent>
                <div class="d-flex">
                        <MudText> <strong>Abilities</strong>
                                    <MudBadge Content="@NumberOfActions()" Color="Color.Primary" Overlap="true" Class="d-flex ml-auto">
                                <MudIcon Icon="@Icons.Filled.Construction" Color="Color.Default" />
                            </MudBadge>
                        </MudText>
                </div>
            </TitleContent>
                    </MudExpansionPanel>
        <MudStack Row="true">
            <MudPaper Class="pa-2">
            <MudMenu Label="Abilities">
                @foreach (Ability ability in selectedMonster.Abilities)
                {
                    <MudMenuItem>@ability.Name</MudMenuItem>
                }
            </MudMenu>
            </MudPaper>
              <MudPaper Class="pa-2">
            <MudMenu Label="Actions">
                @foreach (Data.Action action in selectedMonster.Actions)
                {
                            <MudMenuItem>@action.Name</MudMenuItem>
                }
            </MudMenu>
             </MudPaper>
           </MudStack>
            <MudStack Row="true">
                    <MudPaper Class="pa-3">STR: @selectedMonster.StrPoints (@StatModifier(selectedMonster.StrPoints))</MudPaper>
                    <MudPaper Class="pa-3">DEX: @selectedMonster.DexPoints (@StatModifier(selectedMonster.DexPoints))</MudPaper>
                    <MudPaper Class="pa-3">CON: @selectedMonster.ConPoints (@StatModifier(selectedMonster.ConPoints))</MudPaper>
                    <MudPaper Class="pa-3">WIS: @selectedMonster.WisPoints (@StatModifier(selectedMonster.WisPoints))</MudPaper>
                    <MudPaper Class="pa-3">INT: @selectedMonster.IntPoints (@StatModifier(selectedMonster.IntPoints))</MudPaper>
                    <MudPaper Class="pa-3">CHA: @selectedMonster.ChaPoints (@StatModifier(selectedMonster.ChaPoints))</MudPaper>
            </MudStack>
            </ChildContent>
                </MudExpansionPanel>
</MudExpansionPanels>
    </MudItem>
</MudGrid>


@code {
    @page "/combat"
    @using DMPowerTools.Data;

    @inject ApplicationDbContext DBContext;
    string returnMonster { get; set; }
    IEnumerable<Monster> creatures;
    Monster selectedMonster = new();
    string monsterHeader= "";
    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    private string value;

    protected override async Task OnInitializedAsync()
    {
        creatures = DBContext.Monsters.ToList();
    }

    private async Task<IEnumerable<string>> Filter(string value)
    {
        if (string.IsNullOrEmpty(value))
        {
            return creatures.Select(n => n.Name).ToList();
        }
        var lowerCaseSearchTerm = value.Trim().ToLower();
        return creatures.Select(n => n.Name).Where(p => p.ToLower().Contains(lowerCaseSearchTerm));
    }
    public void ButtonOnClick()
    {
        if (returnMonster == string.Empty) selectedMonster=  new Monster();

        selectedMonster = DBContext.Monsters. 
        Where(a => a.Name == returnMonster).First();
        monsterHeader = $"{selectedMonster.Name} || {selectedMonster.CustomCr} || {DiceRoll()} || {selectedMonster.Alignment}";
    }
    public string DiceRoll()
    {
        Random random = new Random();
        var totalRolls = 0;
        for (int j = 0; j < selectedMonster.HitDice; j++)
        {
            totalRolls = totalRolls + random.Next(1, 8);
        }
        var additionalHP = ((selectedMonster.ConPoints - 10) / 2) * selectedMonster.HitDice;
        return $"HP: {totalRolls + additionalHP} ({selectedMonster.HitDice}d8 + {additionalHP}) ";
    }
    public int StatModifier(int stat)
    {
        return (stat - 10) / 2;
    }
    public int NumberOfActions()
    {
        if (selectedMonster.Actions == null)
        {
            return 0;    
        }
        return selectedMonster.Actions.Count();
    }
}