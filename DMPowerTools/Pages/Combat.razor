
<MudGrid>
        <MudItem xs="12">
        <MudAutocomplete T="string" Label="Creature" @bind-Value="@returnMonster" SearchFunc="@Filter" Variant="Variant.Outlined" Immediate="true" ResetValueOnEmptyText="true" />
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ButtonOnClick">Add To Combat</MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="InitiativeRoll">Initiative Roll</MudButton>
    </MudItem>
     <MudItem xs="12">
        @foreach (ActiveCreature activeCreature in ActiveCreatures)
        {
    <MudExpansionPanels>
            <MudExpansionPanel>
             <TitleContent>
                <div class="d-flex">
                    <MudAvatar Image="" Size="Size.Large" />
                            <MudText> <strong>@activeCreature.Creature.Name</strong>  <small>   @activeCreature.Creature.CustomCr   </small><em>@DiceRoll()</em> : Initiative Roll:@activeCreature.InititiveRoll  </MudText>
                </div>
            </TitleContent>
            <ChildContent>
                    <MudChipSet @bind-SelectedChip="selected" Filter="true">
                        <MudChip Text="Actions" Color="Color.Primary">Actions</MudChip>
                        <MudChip Text="Abilities" Color="Color.Secondary">Abilities</MudChip>
                        <MudChip Text="Skills" Color="Color.Dark">Skills</MudChip>
                    </MudChipSet>
                    <div class="d-flex flex-column align-center">
                        @if (selected != null)
                        {
                     @if (selected.Text == "Actions")
                      {
                                    @foreach (Data.Action action in activeCreature.Creature.Actions)
                                {
                                    <MudText>@action.Name</MudText>
                                    @DisplayAction(action.Desc)
                            }
                        }
                        else if(selected.Text == "Abilities")
                        {
                                    @foreach (Data.Ability ability in activeCreature.Creature.Abilities)
                                {
                                <MudText>@ability.Name</MudText>
                                <MudText>@ability.Desc</MudText>
                            }                   
  
                        }
                        }

                      </div>
            <MudStack Row="true">
                            <MudPaper Class="pa-3">STR: @activeCreature.Creature.StrPoints (@StatModifier(activeCreature.Creature.StrPoints))</MudPaper>
                            <MudPaper Class="pa-3">DEX: @activeCreature.Creature.DexPoints (@StatModifier(activeCreature.Creature.DexPoints))</MudPaper>
                            <MudPaper Class="pa-3">CON: @activeCreature.Creature.ConPoints (@StatModifier(activeCreature.Creature.ConPoints))</MudPaper>
                            <MudPaper Class="pa-3">WIS: @activeCreature.Creature.WisPoints (@StatModifier(activeCreature.Creature.WisPoints))</MudPaper>
                            <MudPaper Class="pa-3">INT: @activeCreature.Creature.IntPoints (@StatModifier(activeCreature.Creature.IntPoints))</MudPaper>
                            <MudPaper Class="pa-3">CHA: @activeCreature.Creature.ChaPoints (@StatModifier(activeCreature.Creature.ChaPoints))</MudPaper>
            </MudStack>
            </ChildContent>
                </MudExpansionPanel>
</MudExpansionPanels>
}
    </MudItem>
</MudGrid>


@using DMPowerTools.DataModels;
@code {
    @page "/combat"
    @using DMPowerTools.Data;
    @using Microsoft.EntityFrameworkCore;
    @using Markdig;

    @inject ApplicationDbContext DBContext;
    string returnMonster { get; set; }
    IEnumerable<Creature> creatures;
    List<ActiveCreature> ActiveCreatures = new();
    Creature selectedMonster = new();
    string monsterHeader= "";
    int combatId=0;
    MudChip selected;

    protected override async  Task OnInitializedAsync()
    {
        creatures =  DBContext.Creatures.Include(a => a.Abilities).Include(b => b.Actions).ToList();
        selectedMonster.Actions = new List<Data.Action>();
    }

    private async Task<IEnumerable<string>> Filter(string value)
    {
        if (string.IsNullOrEmpty(value))
        {
            return creatures.Select(n => n.Name).ToList();
        }
        var lowerCaseSearchTerm = value.Trim().ToLower();
        return creatures.Select(n => n.Name).Where(p => p.ToLower().Contains(lowerCaseSearchTerm));
    }
    public void ButtonOnClick()
    {
        if (returnMonster == string.Empty) selectedMonster=  new Creature();

        selectedMonster = DBContext.Creatures. 
        Where(a => a.Name == returnMonster).First();
        combatId += 1;
        ActiveCreatures.Add(new ActiveCreature(combatId, 0, selectedMonster));
    }
    public string DiceRoll()
    {
        Random random = new Random();
        var totalRolls = 0;
        for (int j = 0; j < selectedMonster.HitDice; j++)
        {
            totalRolls = totalRolls + random.Next(1, 8);
        }
        var additionalHP = ((selectedMonster.ConPoints - 10) / 2) * selectedMonster.HitDice;
        return $"HP: {totalRolls + additionalHP} ({selectedMonster.HitDice}d8 + {additionalHP}) ";
    }
    public int StatModifier(int stat)
    {
        return (stat - 10) / 2; 
    }
    public int NumberOfActions()
    {
        if (selectedMonster.Actions == null)
        {
            return 0;    
        }
        return selectedMonster.Actions.Count();
    }
    public void InitiativeRoll()
    {
        Random random = new Random();
        foreach (ActiveCreature a in ActiveCreatures)
        {
            var roll = random.Next(1, 20);
            a.InititiveRoll = roll + StatModifier(a.Creature.DexPoints);
        }
        ActiveCreatures = ActiveCreatures.OrderByDescending(x => x.InititiveRoll).ToList();
    }
    public MarkupString DisplayAction(string actionDesc)
    {
    return  (MarkupString)Markdown.ToHtml(actionDesc);
        
    }
}